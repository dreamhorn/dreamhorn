// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Card, Deck, Dict, Events, Stack, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Dict = require('collections/dict');

  Stack = require('./stack');

  Card = require('./card');

  Events = require('./events');

  Deck = (function(superClass) {
    extend(Deck, superClass);

    function Deck(options) {
      this.replace = bind(this.replace, this);
      this.clear = bind(this.clear, this);
      this.drop = bind(this.drop, this);
      this.pop = bind(this.pop, this);
      this.push = bind(this.push, this);
      options = options || {};
      this.options = _.defaultsDeep(options, Deck.defaults);
      this.base = this.options.base;
      this.stack = new Stack();
      this.cards_by_id = new Dict();
      this.cards_in_order = [];
      this.seen = new Dict();
      this.on("begin", (function(_this) {
        return function() {
          return _this.push({
            target: _this.options.begin_card || 'begin'
          });
        };
      })(this));
      this.on("replace", this.replace);
      this.on("push", this.push);
      this.on("pop", this.pop);
      this.on("drop", this.drop);
      this.on("clear", this.clear);
    }

    Deck.prototype.card = function(id, data) {
      return this.add_card(new Card(id, data));
    };

    Deck.prototype.add_card = function(card) {
      card.index = this.cards_in_order.length;
      this.cards_by_id.set(card.id.toLowerCase(), card);
      this.cards_in_order.push(card);
      this.trigger("card:add", card);
      return card;
    };

    Deck.prototype.get_card = function(card_id) {
      var card, current, data;
      if (card_id === '-->') {
        current = this.stack.peek();
        card = this.cards_in_order[current.index + 1];
        card_id = card.id;
      } else {
        card = this.cards_by_id.get(card_id.toLowerCase());
      }
      if (!card) {
        data = {};
        this.trigger('card:missing', data);
        if (_.isEmpty(data)) {
          throw new Error("No such card " + card_id);
        } else {
          card = new Card(data);
        }
      }
      return card;
    };

    Deck.prototype.mark_seen = function(card) {
      var seen;
      seen = this.seen.get(card.id);
      this.seen.set(card.id, !seen ? 1 : seen + 1);
      return this.trigger("seen", card);
    };

    Deck.prototype.push = function(data) {
      var card, card_id;
      if (_.isString(data)) {
        data = {
          target: data
        };
      }
      card_id = data.target;
      card = this.get_card(card_id);
      this.stack.push(card, data);
      this.mark_seen(card);
      return card;
    };

    Deck.prototype.pop = function(data) {
      return this.stack.pop(data);
    };

    Deck.prototype.drop = function(data) {
      return this.stack.drop(data.from_card, data);
    };

    Deck.prototype.clear = function(data) {
      this.stack.clear(data);
      return this.push(data);
    };

    Deck.prototype.replace = function(data) {
      var card, popped;
      popped = this.pop(data);
      card = this.push(data);
      this.stack.trigger('replaced', popped, card, data);
      return [popped, card];
    };

    Deck.prototype.extend = function(extensions) {
      _.extend(this, extensions);
      return this;
    };

    return Deck;

  })(Events);

  Deck.defaults = {
    begin_card: 'begin'
  };

  Deck.extend = function(extensions) {
    return _.extend(Deck.prototype, extensions);
  };

  Deck.extend_defaults = function(extensions) {
    return Deck.prototype.defaults = _.defaultsDeep(extensions, Deck.prototype.defaults);
  };

  module.exports = Deck;

}).call(this);
