// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Card, When, _, md5,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  md5 = require('md5');

  When = require('when');

  Card = (function() {
    function Card(id, data) {
      if (_.isUndefined(data)) {
        data = id;
        id = void 0;
      }
      if (_.isString(data)) {
        data = {
          content: data,
          id: id
        };
      }
      if (!data.id) {
        if (!id) {
          data.id = md5(JSON.stringify(data));
        } else {
          data.id = id;
        }
      }
      data.id = data.id.toLowerCase();
      _.assign(this, data);
      this.index = null;
      this.default_action = this.defalut_action || 'push';
    }

    Card.prototype.will_get_attribute = When.lift(function(name, options, deck, _default) {
      var value;
      if (_default == null) {
        _default = '';
      }
      value = this[name];
      if (_.isFunction(value)) {
        value = value.call(this, options, deck);
      }
      return When(value).then(function(value) {
        return value || _default;
      });
    });

    Card.prototype.will_get_header = function(options, deck) {
      return this.will_get_attribute('header', options, deck);
    };

    Card.prototype.will_get_content = function(options, deck) {
      return this.will_get_attribute('content', options, deck);
    };

    Card.prototype.will_get_choices = function(options, deck) {
      var _default, choices, got_choices;
      choices = [];
      got_choices = this.will_get_attribute('choices', options, deck, _default = {});
      return got_choices.then(function(raw_choices) {
        var directive, raw_text;
        for (raw_text in raw_choices) {
          directive = raw_choices[raw_text];
          if (!_.isString(directive)) {
            directive = directive.action + "!" + directive.name;
          }
          choices.push({
            raw_text: raw_text,
            directive: directive
          });
        }
        return choices;
      });
    };

    Card.prototype.is_action = function(event) {
      var actions;
      actions = this.actions;
      if (actions) {
        return event in actions;
      } else {
        return false;
      }
    };

    Card.prototype.parse_directive = function(text, directive) {
      var data, ref;
      data = {
        action: void 0,
        text: text,
        directive: directive
      };
      if (directive === '!') {
        if (this.is_action(text)) {
          data.action = text;
        } else {
          data.action = this.default_action;
          data.target = text;
        }
      } else if (indexOf.call(directive, '!') >= 0) {
        if (_.startsWith(directive, '!')) {
          data.action = _.trimLeft(directive, '!');
        } else {
          ref = directive.split('!', 2), data.action = ref[0], data.target = ref[1];
        }
      } else if (directive === '-->') {
        data.action = this.default_action;
        data.target = this.deck.get_card_after(this.id).id;
      } else {
        data.action = config.default_action;
        data.target = directive;
      }
      if (!data.target) {
        data.target = text.toLowerCase();
      }
      data.action = data.action.toLowerCase();
      return data;
    };

    return Card;

  })();

  module.exports = Card;

}).call(this);

//# sourceMappingURL=card.js.map
