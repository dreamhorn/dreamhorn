// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Card, When, _, md5, templates,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('./util');

  md5 = require('md5');

  When = require('when');

  templates = require('./templates');

  Card = (function() {
    function Card(arg) {
      var data, id;
      id = arg.id, this.deck = arg.deck, data = arg.data;
      if (_.isUndefined(data)) {
        data = id;
        id = void 0;
      }
      if (_.isString(data)) {
        data = {
          content: data,
          id: id
        };
      }
      if (!data.id) {
        if (!id) {
          data.id = md5(JSON.stringify(data));
        } else {
          data.id = id;
        }
      }
      data.id = data.id.toLowerCase();
      _.assign(this, data);
      this.index = null;
      this.default_action = this.default_action || 'push';
    }

    Card.prototype.will_get_attribute = When.lift(function(name, _default) {
      var value;
      if (_default == null) {
        _default = '';
      }
      value = this[name];
      if (_.isFunction(value)) {
        value = value.call(this);
      }
      return When(value).then(function(value) {
        return value || _default;
      });
    });

    Card.prototype.will_get_header = function() {
      if (!_.isUndefined(this._header)) {
        return When(this._header);
      } else {
        return this.will_get_attribute('header').then((function(_this) {
          return function(header) {
            _this._header = header;
            return header;
          };
        })(this));
      }
    };

    Card.prototype.will_get_content = function() {
      if (!_.isUndefined(this._content)) {
        return When(this._content);
      } else {
        return this.will_get_attribute('content').then((function(_this) {
          return function(content) {
            _this._content = content;
            return content;
          };
        })(this));
      }
    };

    Card.prototype.will_get_choices = function() {
      var _default;
      if (!_.isUndefined(this._choices)) {
        return When(this._choices);
      } else {
        return this.will_get_attribute('choices', _default = {}).then((function(_this) {
          return function(raw_choices) {
            var choice, choices, directive, raw_text;
            choices = _this._choices = [];
            for (raw_text in raw_choices) {
              directive = raw_choices[raw_text];
              if (_.isString(directive)) {
                choice = _this.parse_directive(raw_text, directive);
              } else {
                choice = directive;
                choice.raw_text = raw_text;
                if (!directive.raw) {
                  choice.raw = directive.action + "!" + directive.name;
                }
              }
              choices.push(choice);
            }
            return choices;
          };
        })(this));
      }
    };

    Card.prototype.will_get_choices_by_target = function() {
      if (!_.isUndefined(this._choices_by_target)) {
        return When(this._choices_by_target);
      } else {
        return this.will_get_choices().then((function(_this) {
          return function(choices) {
            var cbt, choice, i, len;
            cbt = {};
            for (i = 0, len = choices.length; i < len; i++) {
              choice = choices[i];
              cbt[choice.raw] = choice;
            }
            _this._choices_by_target = cbt;
            return cbt;
          };
        })(this));
      }
    };

    Card.prototype.will_choose = function(choice, el) {
      if (_.isString(choice)) {
        choice = this.parse_directive(el.text, choice);
      }
      if (!choice || !choice.action) {
        debugger;
      }
      if (this.is_action(choice.action)) {
        return When(this.actions[choice.action](this, el));
      } else {
        return this.deck.will_trigger(choice.action, choice).then(function() {});
      }
    };

    Card.prototype.is_action = function(event) {
      var actions;
      actions = this.actions;
      if (actions) {
        return event in actions;
      } else {
        return false;
      }
    };

    Card.prototype.parse_directive = function(raw_text, raw_directive) {
      var data, ref;
      data = {
        action: void 0,
        raw_text: raw_text,
        raw: raw_directive,
        from_card: this
      };
      if (raw_directive === '!') {
        if (this.is_action(raw_text)) {
          data.action = raw_text;
        } else {
          data.action = this.default_action;
          data.target = raw_text;
        }
      } else if (indexOf.call(raw_directive, '!') >= 0) {
        if (_.startsWith(raw_directive, '!')) {
          data.action = _.trimLeft(raw_directive, '!');
        } else {
          ref = raw_directive.split('!', 2), data.action = ref[0], data.target = ref[1];
        }
      } else if (raw_directive === '-->') {
        data.action = this.default_action;
        data.target = this.deck.get_card_after(this).id;
      } else {
        data.action = this.deck.options.default_action;
        data.target = raw_directive;
      }
      if (!data.target) {
        data.target = raw_text.toLowerCase();
      }
      data.action = data.action.toLowerCase();
      return data;
    };

    return Card;

  })();

  module.exports = Card;

}).call(this);

//# sourceMappingURL=card.js.map
