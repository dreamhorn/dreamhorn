// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Dict, Dispatcher, Dreamhorn, Situation, Stack, _, md5, smokesignals,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  smokesignals = require('smokesignals');

  md5 = require('md5');

  Dict = require("collections/dict");

  Stack = (function() {
    function Stack() {
      smokesignals.convert(this);
      this.clear();
    }

    Stack.prototype.clear = function(data) {
      this._data = [null];
      this.length = 0;
      return this.emit('cleared', data);
    };

    Stack.prototype.push = function(item, data) {
      this.length += 1;
      this._data[this.length] = item;
      this.emit('pushed', item, data);
      return this;
    };

    Stack.prototype.peek = function() {
      return this._data[this.length];
    };

    Stack.prototype.pop = function(data) {
      var popped;
      if (this.length > 0) {
        this.length -= 1;
        popped = this._data.pop();
        this.emit('popped', popped, data);
        return popped;
      } else {
        return void 0;
      }
    };

    Stack.prototype.drop = function(item, data) {
      var dropped;
      dropped = _.remove(this._data, _.matchesProperty('id', item.id))[0];
      this.length = this._data.length - 1;
      this.emit('dropped', dropped, data);
      return dropped;
    };

    return Stack;

  })();

  Dispatcher = (function() {
    function Dispatcher() {
      smokesignals.convert(this);
    }

    return Dispatcher;

  })();

  Situation = (function() {
    function Situation(id, data) {
      if (_.isUndefined(data)) {
        data = id;
        id = void 0;
      }
      if (_.isString(data)) {
        data = {
          content: data,
          id: id
        };
      }
      if (!data.id) {
        if (!id) {
          data.id = md5(JSON.stringify(data));
        } else {
          data.id = id;
        }
      }
      data.id = data.id.toLowerCase();
      _.assign(this, data);
      this.index = null;
    }

    return Situation;

  })();

  Dreamhorn = (function() {
    function Dreamhorn(options) {
      this.replace = bind(this.replace, this);
      this.clear = bind(this.clear, this);
      this.drop = bind(this.drop, this);
      this.pop = bind(this.pop, this);
      this.push = bind(this.push, this);
      smokesignals.convert(this);
      options = options || {};
      this.options = _.defaultsDeep(options, Dreamhorn.defaults);
      this.dispatcher = new Dispatcher();
      this.stack = new Stack();
      this.situations_by_id = new Dict();
      this.situations_in_order = [];
      this.seen = new Dict();
      this.on("begin", (function(_this) {
        return function() {
          return _this.push({
            target: _this.options.begin_situation || 'begin'
          });
        };
      })(this));
      this.on("replace", this.replace);
      this.on("push", this.push);
      this.on("pop", this.pop);
      this.on("drop", this.drop);
      this.on("clear", this.clear);
    }

    Dreamhorn.prototype.situation = function(id, data) {
      return this.add_situation(new Situation(id, data));
    };

    Dreamhorn.prototype.add_situation = function(situation) {
      situation.index = this.situations_in_order.length;
      this.situations_by_id.set(situation.id.toLowerCase(), situation);
      this.situations_in_order.push(situation);
      this.emit("situation:add", situation);
      return situation;
    };

    Dreamhorn.prototype.get_situation = function(situation_id) {
      var current, data, situation;
      if (situation_id === '-->') {
        current = this.stack.peek();
        situation = this.situations_in_order[current.index + 1];
        situation_id = situation.id;
      } else {
        situation = this.situations_by_id.get(situation_id.toLowerCase());
      }
      if (!situation) {
        data = {};
        this.emit('situation:missing', data);
        if (_.isEmpty(data)) {
          throw new Error("No such situation " + situation_id);
        } else {
          situation = new Situation(data);
        }
      }
      return situation;
    };

    Dreamhorn.prototype.mark_seen = function(situation) {
      var seen;
      seen = this.seen.get(situation.id);
      this.seen.set(situation.id, !seen ? 1 : seen + 1);
      return this.emit("seen", situation);
    };

    Dreamhorn.prototype.push = function(data) {
      var situation, situation_id;
      if (_.isString(data)) {
        data = {
          target: data
        };
      }
      situation_id = data.target;
      situation = this.get_situation(situation_id);
      this.stack.push(situation, data);
      this.mark_seen(situation);
      return situation;
    };

    Dreamhorn.prototype.pop = function(data) {
      return this.stack.pop(data);
    };

    Dreamhorn.prototype.drop = function(data) {
      return this.stack.drop(data.from_situation, data);
    };

    Dreamhorn.prototype.clear = function(data) {
      this.stack.clear(data);
      return this.push(data);
    };

    Dreamhorn.prototype.replace = function(data) {
      var popped, situation;
      popped = this.pop(data);
      situation = this.push(data);
      this.stack.emit('replaced', popped, situation, data);
      return [popped, situation];
    };

    return Dreamhorn;

  })();

  Dreamhorn.defaults = {
    begin_situation: 'begin'
  };

  Dreamhorn.Dispatcher = Dispatcher;

  Dreamhorn.Stack = Stack;

  Dreamhorn.Situation = Situation;

  module.exports = Dreamhorn;

}).call(this);
