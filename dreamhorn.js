// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Dict, Dreamhorn, Events, Situation, Stack, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Dict = require('collections/dict');

  Stack = require('./stack');

  Situation = require('./situation');

  Events = require('./events');

  Dreamhorn = (function(superClass) {
    extend(Dreamhorn, superClass);

    function Dreamhorn(options) {
      this.replace = bind(this.replace, this);
      this.clear = bind(this.clear, this);
      this.drop = bind(this.drop, this);
      this.pop = bind(this.pop, this);
      this.push = bind(this.push, this);
      options = options || {};
      this.options = _.defaultsDeep(options, Dreamhorn.defaults);
      this.stack = new Stack();
      this.situations_by_id = new Dict();
      this.situations_in_order = [];
      this.seen = new Dict();
      this.on("begin", (function(_this) {
        return function() {
          return _this.push({
            target: _this.options.begin_situation || 'begin'
          });
        };
      })(this));
      this.on("replace", this.replace);
      this.on("push", this.push);
      this.on("pop", this.pop);
      this.on("drop", this.drop);
      this.on("clear", this.clear);
    }

    Dreamhorn.prototype.situation = function(id, data) {
      return this.add_situation(new Situation(id, data));
    };

    Dreamhorn.prototype.add_situation = function(situation) {
      situation.index = this.situations_in_order.length;
      this.situations_by_id.set(situation.id.toLowerCase(), situation);
      this.situations_in_order.push(situation);
      this.trigger("situation:add", situation);
      return situation;
    };

    Dreamhorn.prototype.get_situation = function(situation_id) {
      var current, data, situation;
      if (situation_id === '-->') {
        current = this.stack.peek();
        situation = this.situations_in_order[current.index + 1];
        situation_id = situation.id;
      } else {
        situation = this.situations_by_id.get(situation_id.toLowerCase());
      }
      if (!situation) {
        data = {};
        this.trigger('situation:missing', data);
        if (_.isEmpty(data)) {
          throw new Error("No such situation " + situation_id);
        } else {
          situation = new Situation(data);
        }
      }
      return situation;
    };

    Dreamhorn.prototype.mark_seen = function(situation) {
      var seen;
      seen = this.seen.get(situation.id);
      this.seen.set(situation.id, !seen ? 1 : seen + 1);
      return this.trigger("seen", situation);
    };

    Dreamhorn.prototype.push = function(data) {
      var situation, situation_id;
      if (_.isString(data)) {
        data = {
          target: data
        };
      }
      situation_id = data.target;
      situation = this.get_situation(situation_id);
      this.stack.push(situation, data);
      this.mark_seen(situation);
      return situation;
    };

    Dreamhorn.prototype.pop = function(data) {
      return this.stack.pop(data);
    };

    Dreamhorn.prototype.drop = function(data) {
      return this.stack.drop(data.from_situation, data);
    };

    Dreamhorn.prototype.clear = function(data) {
      this.stack.clear(data);
      return this.push(data);
    };

    Dreamhorn.prototype.replace = function(data) {
      var popped, situation;
      popped = this.pop(data);
      situation = this.push(data);
      this.stack.trigger('replaced', popped, situation, data);
      return [popped, situation];
    };

    return Dreamhorn;

  })(Events);

  Dreamhorn.defaults = {
    begin_situation: 'begin'
  };

  module.exports = Dreamhorn;

}).call(this);
