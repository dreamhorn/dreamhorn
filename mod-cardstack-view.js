// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var CardStackViewModule, CardView, Dreamhorn, ViewModule, When, _, assert, dom,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  dom = require('./dom');

  assert = require('./assert');

  Dreamhorn = require('./dreamhorn');

  ViewModule = require('./mod-view');

  CardView = require('./mod-card-view');

  When = require('when');

  CardStackViewModule = (function(superClass) {
    extend(CardStackViewModule, superClass);

    function CardStackViewModule() {
      this.drop = bind(this.drop, this);
      this.pop = bind(this.pop, this);
      this.push = bind(this.push, this);
      this.on_deactivate_all = bind(this.on_deactivate_all, this);
      this.on_clear = bind(this.on_clear, this);
      this.on_drop = bind(this.on_drop, this);
      this.on_pop = bind(this.on_pop, this);
      this.on_replace = bind(this.on_replace, this);
      this.on_push = bind(this.on_push, this);
      return CardStackViewModule.__super__.constructor.apply(this, arguments);
    }

    CardStackViewModule.prototype.events = {};

    CardStackViewModule.prototype.setup = function() {
      this.deck.stack.on('pushed', this.on_push);
      this.deck.stack.on('popped', this.on_pop);
      this.deck.stack.on('dropped', this.on_drop);
      this.deck.stack.on('replace', this.on_replace);
      this.deck.stack.on('cleared', this.on_reset);
      this.deck.stack.on('cleared', this.on_clear);
      return this.deck.on('deactivate-all', this.on_deactivate_all);
    };

    CardStackViewModule.prototype.on_push = function(card, data) {
      return this.push(card, data);
    };

    CardStackViewModule.prototype.on_replace = function(popped, pushed, data) {
      data.reactivate = false;
      this.pop(popped, data);
      return this.push(pushed, data);
    };

    CardStackViewModule.prototype.on_pop = function(card, data) {
      return this.pop(card, data);
    };

    CardStackViewModule.prototype.on_drop = function(card, data) {
      return this.drop(card, data);
    };

    CardStackViewModule.prototype.on_clear = function(cleared, data) {
      var card, i, len, results;
      results = [];
      for (i = 0, len = cleared.length; i < len; i++) {
        card = cleared[i];
        results.push(this.drop(card));
      }
      return results;
    };

    CardStackViewModule.prototype.on_deactivate_all = function() {
      var i, len, ref, results, view;
      ref = this.get_card_views();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        view = ref[i];
        results.push(view.disable_links());
      }
      return results;
    };

    CardStackViewModule.prototype.push = function(card, data) {
      return this.deck.will_trigger('deactivate-all').then((function(_this) {
        return function() {
          return _this.will_start_card_view(card).then(function(card_view) {
            dom.wrap(_this.el).append(card_view.el);
            return card_view.will_animate_in();
          });
        };
      })(this));
    };

    CardStackViewModule.prototype.pop = function(card, data) {
      var reactivate;
      if (!_.isUndefined(data)) {
        reactivate = _.isUndefined(data.reactivate) ? true : false;
      } else {
        reactivate = true;
      }
      return this.drop(card);
    };

    CardStackViewModule.prototype.drop = function(card, data) {
      return this.will_stop_card_view(card);
    };

    CardStackViewModule.prototype.get_card_views = function() {
      var card;
      return (function() {
        var i, len, ref, results;
        ref = this.deck.cards_in_order;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          card = ref[i];
          results.push(this.get_subview(card.id));
        }
        return results;
      }).call(this);
    };

    CardStackViewModule.prototype.will_ensure_card_view = function(card, options) {
      var subview;
      subview = this.get_subview(card.id);
      if (_.isUndefined(subview)) {
        options = _.defaults({
          card: card
        }, options);
        subview = this.will_use_subview({
          id: card.id,
          type: CardView,
          options: options
        });
      }
      return When(subview);
    };

    CardStackViewModule.prototype.will_start_card_view = function(card, options) {
      return this.will_ensure_card_view(card, options).then((function(_this) {
        return function(view) {
          return _this.will_start_subview(card.id);
        };
      })(this));
    };

    CardStackViewModule.prototype.will_stop_card_view = function(card) {
      return this.will_ensure_card_view(card).then((function(_this) {
        return function(view) {
          return _this.will_stop_subview(card.id);
        };
      })(this));
    };

    return CardStackViewModule;

  })(ViewModule);

  module.exports = CardStackViewModule;

}).call(this);

//# sourceMappingURL=mod-cardstack-view.js.map
