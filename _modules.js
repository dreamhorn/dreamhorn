// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Modules, _, _mod_instances, _mod_types;

  _ = require('lodash');

  _mod_types = {};

  _mod_instances = {};

  Modules = (function() {
    function Modules(base, options1) {
      this.base = base;
      this.options = options1;
    }

    Modules.prototype.define_type = function(module_type, constructor) {
      return _mod_types[module_type] = constructor;
    };

    Modules.prototype.get_type = function(module_type) {
      var mod_type;
      mod_type = _mod_types[module_type];
      if (!mod_type) {
        throw new Error("No such module type " + module_type + "!");
      }
      return mod_type;
    };

    Modules.prototype.get = function(module_id) {
      var mod;
      mod = _mod_instances[module_id];
      if (!mod) {
        throw new Error("No such module instance with id " + module_id + "!");
      }
      return mod;
    };

    Modules.prototype.use = function(arg) {
      var constructor, deck, deck_id, mod, module_id, module_type, options;
      module_id = arg.id, module_type = arg.type, deck_id = arg.deck, arg.options;
      constructor = new this.modules.get_type(module_type);
      deck = this.base.decks.get(deck_id);
      options = _.defaultsDeep(options, this.options);
      mod = _mod_instances[module_id] = {
        id: module_id,
        instance: new constructor(deck, options),
        type: module_type,
        deck: deck_id,
        options: options,
        active: false
      };
      this.base.trigger('module:used', mod);
      return this;
    };

    Modules.prototype.start = function(module_id) {
      var mod;
      mod = this.get(module_id);
      if (_.isFunction(mod.instance.start)) {
        mod.instance.start();
      }
      mod.active = true;
      return this.base.trigger('module:started', mod);
    };

    Modules.prototype.stop = function(module_id) {
      var mod;
      mod = this.get(module_id);
      if (_.isFunction(mod.instance.stop)) {
        mod.instance.stop();
      }
      mod.active = false;
      return this.base.trigger('module:stopped', mod);
    };

    return Modules;

  })();

  module.exports = Modules;

}).call(this);
