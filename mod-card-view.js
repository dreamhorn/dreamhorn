// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var CardViewModule, Dreamhorn, ViewModule, When, _, assert, dom, templates,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('./util');

  When = require('when');

  dom = require('./dom');

  assert = require('./assert');

  Dreamhorn = require('./dreamhorn');

  ViewModule = require('./mod-view');

  templates = require('./templates');

  CardViewModule = (function(superClass) {
    extend(CardViewModule, superClass);

    function CardViewModule() {
      this.on_choice_click = bind(this.on_choice_click, this);
      this.on_deactivate = bind(this.on_deactivate, this);
      return CardViewModule.__super__.constructor.apply(this, arguments);
    }

    CardViewModule.prototype.defaults = {
      template: '<div class="card card--{{ deck.name }} shadow--2dp" id="card-{{ deck.name }}-{{ card.id }}">\n  {{#if header}}\n  <div class="card__header card--{{ deck.name }}__header">\n    {{{ header }}}\n  </div>\n  {{/if}}\n  <div class="card__main card--{{ deck.name }}__main">\n    {{{ content }}}\n  </div>\n  {{#if choices}}\n  <ul class="card__choices card--{{ deck.name }}__choices">\n    {{#each choices}}\n    <li class="card__choices__choice">\n      <a data-target="{{ raw }}" href="#">{{{ text }}}</a>\n    </li>\n    {{/each}}\n  </div>\n  {{/if}}\n</div>'
    };

    CardViewModule.prototype.events = {
      'click a': 'on_choice_click'
    };

    CardViewModule.prototype.get_card = function() {
      return this.options.card;
    };

    CardViewModule.prototype.get_context = function(ambient_context) {
      var card;
      card = this.get_card();
      _.extend(ambient_context, {
        card: card,
        deck: this.deck
      });
      return When.join(this.will_get_header(card, ambient_context), this.will_get_content(card, ambient_context), this.will_get_choices(card, ambient_context)).then((function(_this) {
        return function(arg) {
          var choices, content, header;
          header = arg[0], content = arg[1], choices = arg[2];
          return _.extend(ambient_context, {
            header: header,
            content: content,
            choices: choices
          });
        };
      })(this));
    };

    CardViewModule.prototype.will_get_header = function(card, context) {
      return card.will_get_header().then((function(_this) {
        return function(raw_header) {
          var header;
          header = templates.render_template(raw_header, context);
          return templates.convert_markdown_to_html(header);
        };
      })(this));
    };

    CardViewModule.prototype.will_get_content = function(card, context) {
      return card.will_get_content().then((function(_this) {
        return function(raw_content) {
          var content;
          content = templates.render_template(raw_content, context);
          return templates.convert_markdown_to_html(content);
        };
      })(this));
    };

    CardViewModule.prototype.will_get_choices = function(card, context) {
      return card.will_get_choices().then((function(_this) {
        return function(choices) {
          var choice, i, len;
          for (i = 0, len = choices.length; i < len; i++) {
            choice = choices[i];
            if (_.isUndefined(choice.text)) {
              choice.text = templates.render_template(choice.raw_text, context);
            }
          }
          return choices;
        };
      })(this));
    };

    CardViewModule.prototype.get_links = function() {
      return dom('a', this.el).map(function(anchor) {
        return dom.wrap(anchor);
      });
    };

    CardViewModule.prototype.will_process_el = function() {
      var card;
      card = this.get_card();
      return this.get_links().each((function(_this) {
        return function($el) {
          var href;
          if (!$el.hasClass('raw') && !$el.data('target')) {
            href = $el.attr('href');
            $el.attr('href', '#');
            return $el.attr('data-target', href);
          }
        };
      })(this));
    };

    CardViewModule.prototype.disable_links = function() {
      return this.get_links().each($el)((function(_this) {
        return function() {
          if (!$el.hasClass('sticky')) {
            return $el.addClass('disabled');
          }
        };
      })(this));
    };

    CardViewModule.prototype.enable_links = function() {
      return this.get_links().each($el)((function(_this) {
        return function() {
          return $el.removeClass('disabled');
        };
      })(this));
    };

    CardViewModule.prototype.setup = function() {
      return this.deck.on('card:deactivate-all', this.on_deactivate);
    };

    CardViewModule.prototype.teardown = function() {
      dom.wrap(this.el).empty().remove();
      return this.deck.off('card:deactivate-all', this.on_deactivate);
    };

    CardViewModule.prototype.on_deactivate = function() {};

    CardViewModule.prototype.on_choice_click = function(evt) {
      var $el, card, target;
      $el = dom.wrap(evt.target);
      if ($el.hasClass('raw')) {
        return;
      }
      evt.preventDefault();
      if ($el.hasClass('disabled')) {
        return;
      }
      card = this.options.card;
      target = $el.data('target');
      return card.will_get_choices_by_target().then((function(_this) {
        return function(choices) {
          var choice;
          choice = choices[target];
          if (_.isUndefined(choice)) {
            choice = target;
          }
          return card.will_choose(choice, evt.target).then(function(result) {
            if (_.isString(result)) {
              return dom.wrap(_this.el).replaceWith(templates.convert_to_markdown(result));
            }
          });
        };
      })(this));
    };

    return CardViewModule;

  })(ViewModule);

  module.exports = CardViewModule;

}).call(this);

//# sourceMappingURL=mod-card-view.js.map
