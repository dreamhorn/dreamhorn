// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var CardViewModule, Dreamhorn, ViewModule, assert, dom,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  dom = require('./dom');

  assert = require('./assert');

  Dreamhorn = require('./dreamhorn');

  ViewModule = require('./mod-view');

  CardViewModule = (function(superClass) {
    extend(CardViewModule, superClass);

    function CardViewModule() {
      this.on_deactivate = bind(this.on_deactivate, this);
      return CardViewModule.__super__.constructor.apply(this, arguments);
    }

    CardViewModule.prototype.defaults = {
      template: '<div class="card" id="card-{{ deck.name }}-{{ card.id }}">\n  <div class="card-header">\n    {{ header }}\n  </div>\n  <div class="card-inner">\n    {{ card.content }}\n  </div>\n  <div class="card-footer">\n    {{ footer }}\n  </div>\n</div>'
    };

    CardViewModule.prototype.events = {};

    CardViewModule.prototype.get_context = function() {
      return {
        deck: this.deck,
        card: this.options.card
      };
    };

    CardViewModule.prototype.setup = function() {
      return this.deck.on('card:deactivate-all', this.on_deactivate);
    };

    CardViewModule.prototype.teardown = function() {
      dom.wrap(this.el).empty();
      return this.deck.off('card:deactivate-all', this.on_deactivate);
    };

    CardViewModule.prototype.on_deactivate = function() {};

    return CardViewModule;

  })(ViewModule);

  module.exports = CardViewModule;

}).call(this);

//# sourceMappingURL=mod-card-view.js.map
