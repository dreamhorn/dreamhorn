// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var Dreamhorn, Handlebars, ViewModule, When, _, assert, dom;

  _ = require('lodash');

  dom = require('./dom');

  When = require('when');

  Handlebars = require('handlebars');

  assert = require('./assert');

  Dreamhorn = require('./dreamhorn');

  ViewModule = (function() {
    ViewModule.prototype.events = {};

    ViewModule.prototype.defaults = {
      template: '',
      effect_in: 'default-in',
      effect_out: 'default-out'
    };

    function ViewModule(deck, options) {
      this.deck = deck;
      this.options = _.defaultsDeep({}, options, this.defaults, this.constructor.__super__.defaults);
      assert(this.options.selector, "Views require a `selector` option");
      this.selector = this.options.selector;
      this.template = this.options.template ? Handlebars.compile(this.options.template) : function() {
        return '';
      };
      _.bindAll(this);
      this.el = null;
    }

    ViewModule.prototype.render = function(context) {
      var ambient, ctx;
      context = context || {};
      ambient = {};
      this.deck.trigger('context:get', ambient);
      ctx = _.defaultsDeep({}, context, this.options, ambient);
      return this.template(ctx);
    };

    ViewModule.prototype.connect_events = function() {
      var event, event_selector, handler, handler_name, ref, ref1, selector;
      ref = this.events;
      for (event_selector in ref) {
        handler_name = ref[event_selector];
        ref1 = event_selector.split(/\s+/, 2), event = ref1[0], selector = ref1[1];
        handler = this[handler_name];
        if (_.isFunction(handler)) {
          dom.on(this.el, event, selector, handler);
        }
      }
    };

    ViewModule.prototype.disconnect_events = function() {
      var event, event_selector, handler, handler_name, ref, ref1, selector;
      ref = this.events;
      for (event_selector in ref) {
        handler_name = ref[event_selector];
        ref1 = event_selector.split(/\s+/, 2), event = ref1[0], selector = ref1[1];
        handler = this[handler_name];
        if (_.isFunction(handler)) {
          dom.off(this.el, event, handler);
        }
      }
    };

    ViewModule.prototype.setup = function() {};

    ViewModule.prototype.animate_in = function() {
      return this.deck.base.effects.run(this.options.effect_in, this.el, this.options);
    };

    ViewModule.prototype.teardown = function() {};

    ViewModule.prototype.animate_out = function() {
      return this.deck.base.effects.run(this.options.effect_out, this.el, this.options);
    };

    ViewModule.prototype.start = function() {
      this.el = dom.query(this.selector)[0];
      return When["try"](this.setup).then(this.animate_in).then(this.connect_events);
    };

    ViewModule.prototype.stop = function() {
      return When["try"](this.disconnect_events).then(this.animate_out).then(this.teardown).then((function(_this) {
        return function() {
          return _this.el = null;
        };
      })(this));
    };

    return ViewModule;

  })();

  module.exports = ViewModule;

}).call(this);
